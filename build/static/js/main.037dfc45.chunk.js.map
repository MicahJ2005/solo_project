{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/currentProfileReducer.js","redux/reducers/selectProfileReducer.js","redux/reducers/setIndividualTasksReducer.js","redux/reducers/setIndividualHistoryReducer.js","redux/reducers/setNewTaskListReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/createNewProfileSaga.js","redux/sagas/currentProfilesSaga.js","redux/sagas/deleteProfileSaga.js","redux/sagas/selectProfileSaga.js","redux/sagas/individualTasksSaga.js","redux/sagas/IndividualHistorySaga.js","redux/sagas/addNewTaskSaga.js","redux/sagas/newTaskListSaga.js","redux/sagas/getCurrentTaskListSaga.js","redux/sagas/deleteCurrentTaskSaga.js","redux/sagas/deleteLibraryTaskSaga.js","redux/sagas/deleteCompletedTaskSaga.js","redux/sagas/addCompletedTaskSaga.js","redux/sagas/editProfileSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LeafPage/LeafPage.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/AboutPage/AboutPage.js","components/UserPage/UserPage.js","components/InfoPage/InfoPage.js","components/CreateNewProfile/CreateNewProfile.js","components/CurrentProfiles/CurrentProfiles.js","components/UserInterface/UserInterface.js","components/IndividualTaskForm/TaskForm.js","components/IndividualProfile/IndividualProfile.js","components/HistoryPage/HistoryPage.js","components/CurrentTaskListPage/CurrentTaskListPage.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","currentProfilesReducer","selectProfilesReducer","setIndividualTasksReducer","selectHistoryReducer","setNewTaskListReducer","rootReducer","errors","user","selectProfileReducer","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","addStudent","createNewProfileSaga","call","newProfile","history","push","alert","createNewProfileSaga_marked","createNewProfileSaga_marked2","getProfiles","currentProfilesSaga","concat","currentProfilesSaga_marked","currentProfilesSaga_marked2","deleteProfile","deleteProfileSaga","delete","id","user_id","deleteProfileSaga_marked","deleteProfileSaga_marked2","selectProfile","selectProfileSaga","selectProfileSaga_marked","selectProfileSaga_marked2","getIndividualTasks","individualTasksSaga_marked","individualTasksSaga_marked2","getIndividualHistory","IndividualHistorySaga_marked","IndividualHistorySaga_marked2","addIndividualTask","createNewTaskSaga","student_id","addNewTaskSaga_marked","addNewTaskSaga_marked2","addNewTasksToList","addNewTaskListSaga","newTaskListSaga_marked","newTaskListSaga_marked2","getNewTasksToList","NewTasksToList","getCurrentTaskListSaga_marked","getCurrentTaskListSaga_marked2","deleteCurrentTask","deleteCurrentTaskSaga","deleteCurrentTaskSaga_marked","deleteCurrentTaskSaga_marked2","deleteLibraryTask","deleteThisLibraryTask","deleteLibraryTaskSaga_marked","deleteLibraryTaskSaga_marked2","deleteCompletedTask","deleteCompletedProfileSaga","taskId","taskUserId","deleteCompletedTaskSaga_marked","deleteCompletedTaskSaga_marked2","addCompletedTask","addCompletedTaskSaga","addCompletedTaskSaga_marked","addCompletedTaskSaga_marked2","editProfile","editProfileSaga","profileId","profileUserId","editProfileSaga_marked","editProfileSaga_marked2","rootSaga","all","IndividualTasksSaga","IndividualHistorySaga","addNewTaskSaga","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","Link","to","Fragment","components_LogOutButton_LogOutButton","Footer","LeafPage","Component","LoginPage","username","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","Object","defineProperty","target","value","_this2","components_LeafPage_LeafPage","role","onSubmit","htmlFor","name","onChange","RegisterPage","userType","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","Route","assign","AboutPage","InfoPage","newStudent","student_pic","note","CreateNewProfile","handleChange","_this$setState","JSON","stringify","reduxState","submitForm","placeholder","CurrentProfiles","open","removeProfile","profile","confirmAlert","title","message","buttons","label","handleClickOpen","handleClose","swal","map","key","alt","src","Dialog_default","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","margin","fullWidth","DialogActions_default","Button_default","color","UserInterface","completeTask","tasktoComplete","taskName","task_name","taskImage","image","newTask","TaskForm","individualId","IndividualProfile","viewHistory","task","text","imageUrl","imageWidth","imageHeight","imageAlt","animation","TaskListPreview","removeLibraryTask","individual","IndividualTaskForm_TaskForm","index","HistoryPage","returnToProfile","moment","date_completed","format","CurrentTaskListPage","removeTask","myTasks","userInterface","App","HashRouter","components_Nav_Nav","Switch","Redirect","exact","from","path","components_ProtectedRoute_ProtectedRoute","UserPage","render","components_Footer_Footer","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.037dfc45.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n\nexport default userReducer;\n","const currentProfilesReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_STUDENTS':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default currentProfilesReducer;","const selectProfilesReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'GET_INDIVIDUAL_STUDENT':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default selectProfilesReducer;","const setIndividualTasksReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_INDIVIDUAL_TASKS':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default setIndividualTasksReducer;","const selectHistoryReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_INDIVIDUAL_HISTORY':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default selectHistoryReducer;","const setNewTaskListReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_SELECTED_TASKLIST':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  export default setNewTaskListReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport currentProfilesReducer from './currentProfileReducer';\nimport selectProfileReducer from './selectProfileReducer';\nimport setIndividualTasksReducer from './setIndividualTasksReducer';\nimport selectHistoryReducer from './setIndividualHistoryReducer';\nimport setNewTaskListReducer from './setNewTaskListReducer';\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  currentProfilesReducer,\n  selectProfileReducer,\n  setIndividualTasksReducer,\n  selectHistoryReducer,\n  setNewTaskListReducer,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* addStudent(action) {\n    try {\n        yield call(axios.post, '/addStudent', action.payload.newProfile);\n        action.payload.history.push('/CurrentProfiles');\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add project');\n    }\n}\n\nfunction* createNewProfileSaga() {\n  yield takeLatest('ADD_STUDENT', addStudent);\n  \n}\n\nexport default createNewProfileSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* getProfiles(action) {\n    try {\n        const response = yield call(axios.get, `/getStudentInfo/${action.payload}`)\n        yield put(({ type: 'SET_STUDENTS', payload: response.data}))\n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\nfunction* currentProfilesSaga() {\n  yield takeLatest('RENDER_PROFILES', getProfiles);\n  \n}\n\nexport default currentProfilesSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* deleteProfile(action) {\n    try {\n        yield call(axios.delete, `/delete/${action.payload.id}`)\n        yield put(({ type: 'RENDER_PROFILES', payload: action.payload.user_id}))\n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\n\nfunction* deleteProfileSaga() {\n  yield takeLatest('DELETE_PROFILE', deleteProfile);\n  \n}\n\nexport default deleteProfileSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* selectProfile(action) {\n    try {\n        const response = yield call(axios.get, `/selectProfile/${action.payload}`)\n        yield put({ type: 'GET_INDIVIDUAL_STUDENT', payload: response.data })\n        \n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\n\n\nfunction* selectProfileSaga() {\n  yield takeLatest('SELECT_PROFILE', selectProfile);\n  \n}\n\nexport default selectProfileSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* getIndividualTasks(action) {\n    try {\n        const response = yield call(axios.get, `/getIndividualTasks/${action.payload}`)\n        yield put(({ type: 'SET_INDIVIDUAL_TASKS', payload: response.data}))\n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\nfunction* currentProfilesSaga() {\n  yield takeLatest('RENDER_INDIVIDUAL_TASKS', getIndividualTasks);\n  \n}\n\nexport default currentProfilesSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* getIndividualHistory(action) {\n    try {\n        const response = yield call(axios.get, `/getIndividualHistory/${action.payload}`)\n        yield put(({ type: 'SET_INDIVIDUAL_HISTORY', payload: response.data}))\n        \n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\n\n\nfunction* currentProfilesSaga() {\n  yield takeLatest('RENDER_INDIVIDUAL_HISTORY', getIndividualHistory);\n  \n}\n\nexport default currentProfilesSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* addIndividualTask(action) { \n    try {\n        yield call(axios.post, '/addIndividualTask', action.payload);\n        yield put({ type: 'RENDER_INDIVIDUAL_TASKS', payload: action.payload.student_id } )\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add project');\n    }\n}\n\nfunction* createNewTaskSaga() {\n  yield takeLatest('ADD_NEW_TASK', addIndividualTask);\n  \n}\n\nexport default createNewTaskSaga;","import { takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* addNewTasksToList(action) {\n    try {\n        yield call(axios.post, '/addNewTasksToList', action.payload);\n        \n      }\n      catch (error) {\n        console.log('error with getting request', error);\n        \n      }\n}\n\n\nfunction* addNewTaskListSaga() {\n  yield takeLatest('ADD_TO_TASKLIST', addNewTasksToList);\n \n}\n\nexport default addNewTaskListSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* getNewTasksToList(action) {\n    try {\n        const response = yield call(axios.get, `/getNewTasksToList/${action.payload}`)\n        yield put({ type: 'SET_SELECTED_TASKLIST', payload: response.data})\n        \n      }\n      catch (error) {\n        console.log('error with getting request', error);\n        \n      }\n}\n\n\n\nfunction* NewTasksToList() {\n  yield takeLatest('GET_SELECTED_TASKLIST', getNewTasksToList);\n}\n\nexport default NewTasksToList;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* deleteCurrentTask(action) {\n    try {\n        yield call(axios.delete, `/deleteTask/${action.payload.id}`)\n        yield put(({ type: 'GET_SELECTED_TASKLIST', payload: action.payload.student_id }))\n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\nfunction* deleteCurrentTaskSaga() {\n  yield takeLatest('DELETE_TASK', deleteCurrentTask);\n  \n}\n\nexport default deleteCurrentTaskSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* deleteLibraryTask(action) {\n    try {\n        yield call(axios.delete, `/deleteLibraryTask/${action.payload.id}`)\n        yield put(({ type: 'RENDER_INDIVIDUAL_TASKS', payload: action.payload.student_id }))\n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\n\nfunction* deleteThisLibraryTask() {\n  yield takeLatest('DELETE_LIBRARY_TASK', deleteLibraryTask);\n  \n}\n\nexport default deleteThisLibraryTask;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* deleteCompletedTask(action) {\n    try {\n        yield call(axios.delete, `/deleteCompletedTask/${action.payload.taskId}`)\n        yield put({ type: 'GET_SELECTED_TASKLIST', payload: action.payload.taskUserId} )\n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\nfunction* deleteCompletedProfileSaga() {\n  yield takeLatest('DELETE_COMPLETED_TASK', deleteCompletedTask);\n  \n}\n\nexport default deleteCompletedProfileSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* addCompletedTask(action) { \n    try {\n        yield call(axios.post, '/addCompletedTask', action.payload);\n        yield put({ type: 'DELETE_COMPLETED_TASK', payload: action.payload} )\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add project');\n    }\n}\n\nfunction* addCompletedTaskSaga() {\n  yield takeLatest('ADD_COMPLETED_TASK', addCompletedTask);\n  \n}\n\nexport default addCompletedTaskSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* editProfile(action) { \n    try {\n        yield call(axios.put, `/editProfile/${action.payload.profileId}`, action.payload);\n        yield put({ type: 'RENDER_PROFILES', payload: action.payload.profileUserId } )\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add project');\n    }\n}\n\n\nfunction* editProfileSaga() {\n  yield takeLatest('EDIT_PROFILE', editProfile);\n  \n}\n\nexport default editProfileSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport createNewProfileSaga from './createNewProfileSaga';\nimport currentProfilesSaga from './currentProfilesSaga';\nimport deleteProfileSaga from './deleteProfileSaga';\nimport selectProfileSaga from './selectProfileSaga';\nimport IndividualTasksSaga from './individualTasksSaga';\nimport IndividualHistorySaga from './IndividualHistorySaga';\nimport addNewTaskSaga from './addNewTaskSaga';\nimport addNewTaskListSaga from './newTaskListSaga';\nimport NewTasksToList from './getCurrentTaskListSaga';\nimport deleteCurrentTask from './deleteCurrentTaskSaga';\nimport deleteThisLibraryTask from './deleteLibraryTaskSaga';\nimport deleteCompletedTask from './deleteCompletedTaskSaga';\nimport addCompletedTask from './addCompletedTaskSaga';\nimport editProfileSaga from './editProfileSaga';\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    createNewProfileSaga(),\n    currentProfilesSaga(),\n    deleteProfileSaga(),\n    selectProfileSaga(),\n    IndividualTasksSaga(),\n    IndividualHistorySaga(),\n    addNewTaskSaga(),\n    addNewTaskListSaga(),\n    NewTasksToList(),\n    deleteCurrentTask(),\n    deleteThisLibraryTask(),\n    deleteCompletedTask(),\n    addCompletedTask(),\n    editProfileSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  \n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n\n  \n  \n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\n\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n      <h2 className=\"nav-title\">F/TforME</h2>\n    </Link>\n    <div className=\"nav-right\">\n      <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? 'Home' : 'Login / Register'}\n      </Link>\n      <Link className=\"nav-link\" to=\"/CurrentProfiles\">View All Profiles</Link>\n          <Link className=\"nav-link\" to=\"/CreateNewProfile\">Create New Profile</Link>\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          {/* <Link className=\"nav-link\" to=\"/CreateNewProfile\">\n          Create New Profile\n          </Link> */}\n          <LogOutButton className=\"nav-link\"/>\n          \n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n      <Link className=\"nav-link\" to=\"/about\">\n        About\n      </Link>\n    </div>\n    \n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of the simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; F/TforME\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LeafPage extends Component {\n  \n  render() {\n    return (\n      <div id=\"leaves\">\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i> \n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i> \n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n        <i></i>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LeafPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport LeafPage from '../LeafPage/LeafPage'\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n      <LeafPage />\n      <div id=\"newLogin\">\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </button>\n        </center>\n      </div>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport LeafPage from '../LeafPage/LeafPage'\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n    userType:'',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n    if (this.state.username && this.state.password && this.state.userType) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n          userType: this.state.userType\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <LeafPage />\n        <div id=\"newLogin\">\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n          <li> <label htmlFor=\"userType\">\n              User Type:    \n              <select name=\"userType\" id=\"userType\" type=\"userType\" onChange={this.handleInputChangeFor('userType')}>\n                <option value=\"\">Please chose a user type</option>\n                  <option value=\"1\">Parent</option>\n                  <option value=\"2\">Teacher</option>\n              </select>\n            </label></li>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\n\nconst AboutPage = () => (\n  <div>\n    <div>\n      <p id=\"aboutPageText\">\n        <h1>Overview</h1>\n\n        <h2> \n        <em>Navigation</em>\n        </h2>\n          <h3>Registration </h3>\n            <li> Create your own, unique User Name and Password (note: you are only able to access profiles you have created).</li>\n            <li>Each time you return to the site, you may log in using your User Name and Password.</li>\n          \n          <h3>Creating a Profile</h3>\n            <li>To create a new student profile, simply Click on the \"Create New Profile\" link on the top navigation bar.</li>\n            <li>Fill in the required information and Click \"Submit\".</li>\n\n          <h3>\"View All Profiles\" Page</h3>\n            <li>Upon creating a new profile, you will be redirected the the \"View All Profiles\" Page.</li>\n            <li>On this page, the user may Edit, Select, or Remove the given profile(s).</li>\n\n          <h3>Individual Profile</h3>\n            <li>Upon \"Select\"ing a profile from the \"View All Profiles\" page, the user can view the details for the Profile selected.</li>\n            <li>On this page, the user is able to add/delete tasks in their \"Task Library\", view their recent history, or Click on Images they would like to add to their current task list.</li>\n            <li>Note: Every Task Library is unique and customized to the individual profile</li>\n          \n          <h3>Current Task List</h3>\n            <li>Once the user has selected the task they want to add to their \"Task List\", they can Click \"Preview Schedule\" to see what has been selected.</li>\n            <li>If there are tasks the user wishes to remove from the \"Task List\", they can easily do this by Clicking the \"Remove\" button under each task.</li>\n            <li>When the User is ready to start, Click \"Start Schedule\"</li>\n          \n          <h3>User Interface</h3>\n            <li>The User Interface is designed to be very simple and easy to use.</li>\n            <li>Once the \"First\" task is completed, simply click the \"First\" image, add any notes you desire, and click \"ok\"</li>\n            <li>Your completed tasks will be displayed in the profile \"History\" Page; complete with Task Name, Date and Time of completion, and any special Notes.</li>\n      <br/>\n          <h3>Contact Information</h3>\n          <li>If at any time you have questions, please contact the Application Creator at:</li>\n          <li> Micah Johnson </li>\n          <li>micahj2005@hotmail.com</li>\n      </p>\n    </div>\n  </div>\n);\n\nexport default AboutPage;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\n\n// this could also be written with destructuring parameters as:\n// const UserPage = ({ user }) => (\n// and then instead of `props.user.username` you could use `user.username`\nconst UserPage = (props) => (\n  <div>\n    \n  <div id=\"UserPage\" >\n    <h1 id=\"welcome\">\n      Welcome, { props.user.username }!\n    </h1>\n    <p>Your ID is: {props.user.id}</p>\n    <LogOutButton className=\"log-in\" />\n  </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UserPage);\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst InfoPage = () => (\n  <div>\n    <p>\n      Info Page\n    </p>\n  </div>\n);\n\nexport default InfoPage;\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nconst newStudent = {\n    name: '',\n    student_pic: '',\n    note: '',\n    user_id: '',\n}\n\nclass CreateNewProfile extends Component {\n    state = newStudent\n\n    /// handling the change of each event\n    handleChange = event => {\n        this.setState({\n                [event.target.name]: event.target.value,\n                user_id: JSON.stringify(this.props.reduxState.user.id)\n        });\n}\n\n    submitForm = event => {\n        event.preventDefault();\n        this.props.dispatch({ type: 'ADD_STUDENT', \n        payload: {\n            newProfile: this.state,\n            history: this.props.history}\n\n         })\n        this.setState(newStudent);\n    }\n\n\n  render () { \n    return (\n      <div>\n          <section>\n            <header>\n                <h1>Create New Profile</h1>\n            </header>\n                    <br></br>\n                <form onSubmit={this.submitForm} id=\"newProfile\">  \n                    <input name=\"name\" type=\"text\" placeholder=\"Add Student Name\" value={this.state.name} onChange={this.handleChange}/>\n                    <input name=\"student_pic\" type=\"text\" placeholder=\"Add Image URL\" value={this.state.student_pic} onChange={this.handleChange}/>\n                    <input name=\"note\" type=\"text\" placeholder=\"Add a Note\" value={this.state.note} onChange={this.handleChange}/>\n                    <input id=\"selectButton\" type=\"submit\" value=\"submit\"></input>\n                    <h2><em>Never underestimate the impact <u>YOU</u> have on a child's life!</em> </h2>\n                </form>\n            </section>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\n\nexport default connect(mapStateToProps) (CreateNewProfile)","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { confirmAlert } from 'react-confirm-alert'; \nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport swal from 'sweetalert';\n\nclass CurrentProfiles extends Component {\n  state = {\n    name: '',\n    note: '',\n    student_pic: '',\n    profileId: '',\n    profileUserId: '',\n    open: false,\n\n  }\n\n\n  componentWillMount() {\n    this.props.dispatch({ type: 'RENDER_PROFILES', payload: this.props.reduxState.user.id })\n  }\n\n\n  removeProfile = (profile) => {\n    confirmAlert({\n      title: 'Delete Profile?',\n      message: 'Are you sure you want to DELETE this profile?',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => this.props.dispatch({ type: 'DELETE_PROFILE', payload: profile })\n\n        },\n        {\n          label: 'No',\n          onClick: () => alert('Click No')\n        }\n      ]\n    })\n  }\n\n  selectProfile = (profile) => {\n    this.props.dispatch({ type: 'SELECT_PROFILE', payload: profile.id })\n    this.props.dispatch({ type: 'RENDER_INDIVIDUAL_TASKS', payload: profile.id })\n    this.props.dispatch({ type: 'RENDER_INDIVIDUAL_HISTORY', payload: profile.id })\n    this.props.dispatch({ type: 'GET_SELECTED_TASKLIST', payload: profile.id })\n    this.props.history.push('/IndividualProfile')\n  }\n\n\n  handleClickOpen = (profile) => {\n    console.log('in handleClickOpen profile', profile);\n    this.setState({\n      name: profile.name,\n      note: profile.note,\n      student_pic: profile.student_pic,\n      profileId: profile.id,\n      profileUserId: profile.user_id,\n      open: true,\n    })\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  \n  };\n\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  editProfile = profile => {\n    this.setState({ open: false });\n    this.props.dispatch({\n      type: 'EDIT_PROFILE', payload: {\n        name: this.state.name,\n        note: this.state.note,\n        student_pic: this.state.student_pic,\n        profileId: this.state.profileId,\n        profileUserId: this.state.profileUserId\n      }\n    })\n    swal(\"You are Awesome!\", \"Profile Successfully Updated!\", \"success\");\n  }\n\n  render() {\n    return (\n\n      <div>\n        <h1>Profiles</h1>\n        <div >\n          {this.props.reduxState.currentProfilesReducer.map((profile) => {\n            return (\n              <ul key={profile.id} id=\"currentProfiles\" >\n                <li ><img id=\"profileImg\" alt={profile.id} src={profile.student_pic} /></li>\n                <li id=\"profileName\">{profile.name}</li>\n                <li id=\"allProfilesNote\"><em>{profile.note}</em></li>\n                  <div id=\"currentProfileButtons\">\n                    <li><button id=\"editButton\" onClick={() => { this.handleClickOpen(profile) }}>Edit</button></li>\n                    <li><button id=\"selectButton\" onClick={() => { this.selectProfile(profile) }}>Select</button></li>\n                    <li><button id=\"deleteButton\" onClick={() => { this.removeProfile(profile) }}>Remove</button></li>\n                  </div>\n              </ul>\n            )\n          })}\n        </div>\n\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          // onSubmit={() => this.completeTask(this.props.reduxState.setNewTaskListReducer[0])}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">Edit Your Profile!</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n            </DialogContentText>\n            <TextField\n              onChange={this.handleChange}\n              value={this.state.name}\n              name=\"name\"\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Update Profile Name\"\n              type=\"text\"\n              fullWidth\n            />\n          </DialogContent>\n          <DialogContent>\n            <DialogContentText>\n            </DialogContentText>\n            <TextField\n              onChange={this.handleChange}\n              value={this.state.note}\n              name=\"note\"\n              autoFocus\n              margin=\"dense\"\n              id=\"note\"\n              label=\"Update Profile Note\"\n              type=\"text\"\n              fullWidth\n            />\n          </DialogContent>\n          <DialogContent>\n            <DialogContentText>\n            </DialogContentText>\n            <TextField\n              onChange={this.handleChange}\n              value={this.state.student_pic}\n              name=\"student_pic\"\n              autoFocus\n              margin=\"dense\"\n              id=\"student_pic\"\n              label=\"Update Profile Image\"\n              type=\"text\"\n              fullWidth\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={() => this.editProfile()} color=\"primary\" >\n              Complete\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    )\n  }\n}\n\n\n\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\n\nexport default connect(mapStateToProps)(CurrentProfiles);","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nclass UserInterface extends Component {\n  state = {\n    id: '',\n    note: '',\n    open: false,\n  }\n\n  handleClickOpen = () => {\n    this.setState({ note: ''});\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false});\n  };\n\n\n  completeTask = (tasktoComplete) => {  \n    this.setState({ open: false });\n    confirmAlert({\n      title: 'Complete Task?',\n      message: 'Are you sure you are done?',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => this.props.dispatch({ type: 'ADD_COMPLETED_TASK', payload: {\n            taskName: tasktoComplete.task_name,\n            taskId: tasktoComplete.id,\n            taskUserId: tasktoComplete.student_id,\n            taskImage: tasktoComplete.image,\n            note: this.state.note,\n          }}) \n          \n        },\n        {\n          label: 'No',\n          onClick: () => alert('Click No')\n        }\n      ]\n    })\n  }\n\n  handleChange = event => {\n    this.setState({\n            [event.target.name]: event.target.value,\n    });\n}\n  \n\n  render () {\n    return (\n      <div>\n        <div id=\"uiImage1bg\" >\n          <div id=\"firstTextBG\">\n            <h1 id=\"firstText\">First</h1>\n          </div>\n            {this.props.reduxState.setNewTaskListReducer[0] !== undefined ?  (\n                <div><img onClick={this.handleClickOpen} id=\"uiImage1\" src={this.props.reduxState.setNewTaskListReducer[0].image} alt=\"img1\"/>\n                <h2 id=\"uiTaskName1\">{this.props.reduxState.setNewTaskListReducer[0].task_name}</h2></div>\n              ) : (<ul><h1 id=\"addMoreImages1\"> WOW! You did it! </h1><h4 id=\"addMoreImages1\">Return to your profile to add more images!</h4></ul>)\n            }\n          <div >\n              \n          </div>\n            <Dialog\n              open={this.state.open}\n              onClose={this.handleClose}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <DialogTitle id=\"form-dialog-title\">Complete Task!</DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  Would you like to add a note to you completed task? (you don't have to)\n                </DialogContentText>\n                <TextField\n                  onChange={this.handleChange}\n                  value={this.state.note}\n                  name=\"note\"\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"note\"\n                  label=\"Task Note\"\n                  type=\"text\"\n                  fullWidth\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={() => this.completeTask(this.props.reduxState.setNewTaskListReducer[0])}color=\"primary\" >\n                  Complete\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n            \n        <div id=\"uiImage2bg\" >\n          <div id=\"thenTextBG\">\n            <h1 id=\"thenText\">Then</h1>\n          </div>\n          {this.props.reduxState.setNewTaskListReducer[1] !== undefined ?  (\n              <div><img id=\"uiImage2\" src={this.props.reduxState.setNewTaskListReducer[1].image} alt=\"img2\"/>\n              <h2 id=\"uiTaskName2\">{this.props.reduxState.setNewTaskListReducer[1].task_name}</h2></div>\n            ) : (<h1 id=\"addMoreImages1\"> You're Almost Done!!!</h1>)\n            }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default connect(mapStateToProps) (UserInterface);","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\n\nconst newTask = {\n    task_name: '',\n    image: '',\n    student_id: '',\n\n}\n\nclass TaskForm extends Component {\n    state = newTask\n\n    handleChange = event => {\n        this.setState({\n                [event.target.name]: event.target.value,\n                student_id: JSON.stringify(this.props.individualId)\n        });\n}\n\n    submitForm = event => {\n        event.preventDefault();\n        this.props.dispatch({ type: 'ADD_NEW_TASK', payload: this.state })\n        this.setState(newTask);\n        \n    }\n\n\n  render () {\n    return (\n      <div id=\"taskForm\">\n        \n        <div id=\"addTaskHeader\">\n            <h3>Add a New Task</h3>\n        </div>\n        <form onSubmit={this.submitForm}>  \n            <input name=\"task_name\" type=\"text\" placeholder=\"Add Task Name\" value={this.state.task_name} onChange={this.handleChange}/>\n            <input name=\"image\" type=\"text\" placeholder=\"Add Task Image URL\" value={this.state.image} onChange={this.handleChange}/>\n            <input id=\"selectTaskButton\" type=\"submit\" value=\"submit\"></input>\n        </form>\n    </div>\n    )\n  }\n}\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps) (TaskForm)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport IndividualTaskForm from '../IndividualTaskForm/TaskForm';\nimport { confirmAlert } from 'react-confirm-alert'; \nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport swal from 'sweetalert2';\n\nconst newTask = {\n  id:'',\n  image: '', \n  student_id: '',\n  task_name: '',\n\n}\n\nclass IndividualProfile extends Component {\n  state = newTask;\n\n  viewHistory = () => {\n    this.props.history.push('/HistoryPage')\n  }\n\n  handleChange = (task) => {\n    swal({\n      title: `${task.task_name} Added!`,\n      text: 'Have Fun!',\n      imageUrl: `${task.image}`,\n      imageWidth: 300,\n      imageHeight: 200,\n      imageAlt: 'Custom image',\n      animation: false\n    })\n    this.props.dispatch({ type: 'ADD_TO_TASKLIST', payload: {\n      task_name: task.task_name,\n      student_id: JSON.stringify(task.student_id),\n      image: task.image,\n\n    }})\n    this.props.dispatch(({ type: 'GET_SELECTED_TASKLIST', payload: task.student_id }))\n  }\n\n  TaskListPreview = () => {\n    this.props.history.push('/CurrentTaskListPage')\n\n  } \n\n  removeLibraryTask = (task) => {\n    confirmAlert({\n      title: 'Delete Task from Library?',\n      message: 'Are you sure you want to DELETE this Task from your Library?',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => this.props.dispatch({ type: 'DELETE_LIBRARY_TASK', payload: task})\n          \n        },\n        {\n          label: 'No',\n          onClick: () => alert('Click No')\n        }\n      ]\n    })\n  }\n\n    \n  render () {\n    return (\n      <div id=\"individualProfileCard\">\n        \n        {this.props.reduxState.selectProfileReducer.map((individual) => {\n          return(\n            <ul >\n              <div id=\"profileHead\" key={individual.id} >\n                <li><h1>{individual.name} Profile</h1></li>\n              \n                <li><img  id=\"IndividualProfileImg\" alt= \"baby\" src={individual.student_pic}/></li>\n                <li id=\"profileNote\"><em>{individual.note}</em></li>\n              </div>\n              {/* <button>Add To Library</button> */}\n            <br></br>\n              <IndividualTaskForm individualId={individual.id}/>\n            \n              <section> \n                <button id=\"historyButton\" onClick={this.viewHistory}>View History</button>\n              </section>\n            \n              <section id=\"taskLibrary\">\n                <div id=\"libraryHeader\">\n                  <h2>{individual.name}'s Task Library</h2>\n                  <h6>(click on an image to add it to your task list task)</h6>\n                </div>\n                  {this.props.reduxState.setIndividualTasksReducer.map( task => {\n                    return(\n                    <div key={task.index} id=\"taskImgBox\">\n                        <li><img onClick={() => this.handleChange(task)} value={task.id} id=\"taskImg\" name=\"task\"  alt= \"task\" src={task.image}/></li>\n                        <li>{task.task_name}</li>\n                        <button id=\"taskLibraryDeleteButton\" onClick={() => {this.removeLibraryTask(task)}}>Remove</button>\n                    </div>\n                  )\n                })}\n                <button id=\"previewScheduleButton\" onClick={this.TaskListPreview}>Preview Schedule</button>\n              </section>\n            </ul>\n            )\n          })}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\n\nexport default connect(mapStateToProps) (IndividualProfile)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport moment from 'moment';\n\nclass HistoryPage extends Component {\n\n  returnToProfile = () => {\n    this.props.history.push('/IndividualProfile')\n  }\n\n  render () {  \n    return (\n      <div>\n        <section>\n          <button id=\"returnToProfileButton\" onClick={this.returnToProfile}>Return to Profile</button>\n        </section>\n\n        <section id=\"historyTable\">\n        {this.props.reduxState.selectProfileReducer.map((profile) => {\n          return(\n            <h1 key={profile.id}>{profile.name} History</h1>\n          ) \n        })}\n      \n            <table >\n              <thead id=\"tableHead\"> \n                <tr>\n                  <td>Task Completed</td>\n                  <td>Date Completed</td>\n                  <td>Task Notes</td>\n                </tr>\n              </thead>\n              \n              {this.props.reduxState.selectHistoryReducer.map( history => {\n                return(\n              <tbody key={history.index} id=\"tableBody\">\n                <tr>\n                  <td>{history.task_name}</td>\n                  <td>{moment(history.date_completed).format('LLLL')}</td>\n                  <td>{history.note}</td>\n                </tr>\n              </tbody>\n                )\n              })}\n            </table>\n          </section>\n        </div>\n    )\n  }\n}\n\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default connect(mapStateToProps) (HistoryPage);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { confirmAlert } from 'react-confirm-alert'; \nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\nclass CurrentTaskListPage extends Component {\n\n    removeTask = (myTasks) => {\n        confirmAlert({\n            title: 'Delete Task?',\n            message: 'Are you sure you want to DELETE this Task?',\n            buttons: [\n              {\n                label: 'Yes',\n                onClick: () => this.props.dispatch({ type: 'DELETE_TASK', payload: myTasks})\n                \n              },\n              {\n                label: 'No',\n                onClick: () => alert('Click No')\n              }\n            ]\n          })\n        \n      }\n\n    userInterface = () => {\n        this.props.history.push('/UserInterface')\n    }\n\n  render () {\n    return (\n      <div id=\"individualProfileCard\">\n        <div> \n          <div id=\"currentTaskListHeader\">\n            <h1>Current Task List</h1>\n              <h6 id=\"CurrentTasks\">(To remove an image, click REMOVE)</h6>\n              <h6 id=\"CurrentTasks\">(When you are ready to start your schedule, click START SCHEDULE)</h6>\n          </div>\n          <button id=\"startScheduleButton\" onClick={this.userInterface}>Start Schedule</button>\n              {this.props.reduxState.setNewTaskListReducer.map( myTasks => {\n                  return(\n                      <ul key={myTasks.id} id=\"currentTaskImageBG\">\n                          <img  id=\"currentTaskListImage\" alt=\"task\" src={myTasks.image}/>\n                          <li>{myTasks.task_name}</li>\n                          <button id=\"deleteButton\" onClick={() => {this.removeTask(myTasks)}}>Remove</button>\n                      </ul>\n                  )\n                })}\n            </div>\n          <div>  \n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default connect(mapStateToProps) (CurrentTaskListPage);","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport AboutPage from '../AboutPage/AboutPage';\nimport UserPage from '../UserPage/UserPage';\nimport InfoPage from '../InfoPage/InfoPage';\nimport CreateNewProfile from '../CreateNewProfile/CreateNewProfile';\nimport CurrentProfiles from '../CurrentProfiles/CurrentProfiles';\nimport UserInterface from '../UserInterface/UserInterface';\nimport IndividualProfile from '../IndividualProfile/IndividualProfile';\nimport HistoryPage from '../HistoryPage/HistoryPage';\nimport CurrentTaskListPage from '../CurrentTaskListPage/CurrentTaskListPage';\n\nimport './App.css';\n\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={UserPage}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            />\n            <ProtectedRoute path=\"/UserInterface\" component={UserInterface} />\n            <ProtectedRoute exact path=\"/CreateNewProfile\" component={CreateNewProfile} />\n            <ProtectedRoute path=\"/CurrentProfiles\" component={CurrentProfiles} />\n            <ProtectedRoute path=\"/IndividualProfile\" component={IndividualProfile} />\n            <ProtectedRoute path=\"/HistoryPage\" component={HistoryPage} />\n            <ProtectedRoute path=\"/CurrentTaskListPage\" component={CurrentTaskListPage} />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          \n          <section>\n          <Footer />\n          </section>\n        </div>\n        \n      </Router>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}